import os
import xml.etree.ElementTree as ET
from difflib import unified_diff
import pandas as pd

# üîÅ Set your folder paths
release_dir = "H:/Commit/release_folder"
local_dir = "H:/Commit/local_folder"
output_path = "H:/Commit/formatter_full_comparison.xlsx"

results = []

def read_file_lines(filepath):
    encodings = ['utf-8', 'utf-16', 'latin-1']
    for enc in encodings:
        try:
            with open(filepath, 'r', encoding=enc) as f:
                return f.readlines()
        except UnicodeDecodeError:
            continue
    raise ValueError(f"Unable to decode file: {filepath}")

def extract_name_if_formatter(xml_path):
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        component = root.find(".//ObjectType")
        if component is not None and "Import/Export Format" in component.attrib.get("ComponentName", ""):
            name_tag = root.find(".//Row/Name")
            return name_tag.text.strip() if name_tag is not None else None
    except:
        return None
    return None

def compare_xmls_with_line_numbers(local_path, release_path):
    local_lines = read_file_lines(local_path)
    release_lines = read_file_lines(release_path)
    diff = list(unified_diff(local_lines, release_lines, fromfile='local', tofile='release', n=0))
    changes = []
    rel_line_num = 0
    for line in diff:
        if line.startswith("@@"):
            for part in line.split():
                if part.startswith('+'):
                    try:
                        rel_line_num = int(part[1:].split(',')[0]) - 1
                    except:
                        rel_line_num = 0
        elif line.startswith("+") and not line.startswith("+++"):
            changes.append((rel_line_num + 1, "Added", line.strip()))
            rel_line_num += 1
        elif line.startswith("-") and not line.startswith("---"):
            changes.append((None, "Removed", line.strip()))
    return changes

# STEP 1: Process release folders that contain "xml" in the folder name
release_names = set()

for folder in os.listdir(release_dir):
    folder_path = os.path.join(release_dir, folder)

    if os.path.isdir(folder_path) and 'xml' in folder.lower():
        for root, _, files in os.walk(folder_path):
            for file in files:
                if file.endswith(".xml"):
                    release_xml_path = os.path.join(root, file)
                    name = extract_name_if_formatter(release_xml_path)
                    if name:
                        release_names.add(name)
                        local_found = False

                        # Search this formatter in local folder
                        for l_root, _, l_files in os.walk(local_dir):
                            for l_file in l_files:
                                if l_file.endswith(".xml"):
                                    full_local_path = os.path.join(l_root, l_file)
                                    try:
                                        tree = ET.parse(full_local_path)
                                        root_tag = tree.getroot()
                                        local_name_tag = root_tag.find(".//Row/Name")
                                        if local_name_tag is not None and local_name_tag.text.strip() == name:
                                            local_found = True
                                            changes = compare_xmls_with_line_numbers(full_local_path, release_xml_path)
                                            if changes:
                                                for line_num, change_type, content in changes:
                                                    results.append({
                                                        "Formatter Name": name,
                                                        "Release XML Path": release_xml_path,
                                                        "Status": "Changed",
                                                        "Line Number": line_num if line_num else "N/A",
                                                        "Change Type": change_type,
                                                        "Change": content
                                                    })
                                            break
                                    except:
                                        continue
                            if local_found:
                                break

                        if not local_found:
                            results.append({
                                "Formatter Name": name,
                                "Release XML Path": release_xml_path,
                                "Status": "Missing in Local",
                                "Line Number": "N/A",
                                "Change Type": "N/A",
                                "Change": "N/A"
                            })

# STEP 2: Check for formatters present in local but missing in release
for l_root, _, l_files in os.walk(local_dir):
    for l_file in l_files:
        if l_file.endswith(".xml"):
            local_xml_path = os.path.join(l_root, l_file)
            try:
                tree = ET.parse(local_xml_path)
                root_tag = tree.getroot()
                name_tag = root_tag.find(".//Row/Name")
                if name_tag is not None:
                    name = name_tag.text.strip()
                    if name not in release_names:
                        results.append({
                            "Formatter Name": name,
                            "Release XML Path": "N/A",
                            "Status": "Missing in Release",
                            "Line Number": "N/A",
                            "Change Type": "N/A",
                            "Change": "N/A"
                        })
            except:
                continue

# Save to Excel
df = pd.DataFrame(results)
df.to_excel(output_path, index=False)
print(f"‚úÖ Done. Results saved to Excel at: {output_path}")